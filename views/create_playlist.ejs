<style>
	.body::-webkit-scrollbar {
  display: none; }

.body {
  flex: 0.8;
  background: linear-gradient(#5b5773, black);
  color: var(--text-color);
  height: 100vh;
  min-height: 100vh;
  padding: 30px;
  overflow-y: overlay; }
  .body .body__info {
    display: flex;
    align-items: flex-end;
    padding: 10px;
    gap: 1rem; }
    .body .body__info img {
      height: 15vw;
      margin: 0 20px;
      border-radius: 10px;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5); }
    .body .body__info .body__infoText {
      flex: 1; }
      .body .body__info .body__infoText .playlist_nameInput {
        background: transparent;
        color: var(--text-color);
        font-size: 48px;
        outline: none;
        border: none;
        width: 100%;
        font-weight: 700;
        display: none;
        margin: 0;
        padding: 0; }
        .body .body__info .body__infoText .playlist_nameInput:hover {
          cursor: default; }
        .body .body__info .body__infoText .playlist_nameInput:focus {
          outline: none; }
        .body .body__info .body__infoText .playlist_nameInput.active {
          display: initial; }
      .body .body__info .body__infoText h2 {
        font-size: 48px;
        margin-bottom: 10px; }
        .body .body__info .body__infoText h2.active {
          display: none; }
      .body .body__info .body__infoText p {
        font-size: 14px;
        color: lightgray; }
      .body .body__info .body__infoText .user_info {
        display: flex;
        align-items: center;
        margin: 10px 0;
        gap: 0.5rem; }
        .body .body__info .body__infoText .user_info img {
          height: 1.5rem;
          width: 1.5rem;
          border-radius: 50%;
          margin: 0; }
          .body .body__info .body__infoText .user_info img + P:hover {
            cursor: pointer;
            text-decoration: underline; }
  .body .body__songs {
    margin: 20px -30px; }
    .body .body__songs .body__icons {
      display: flex;
      align-items: center;
      margin-bottom: 10px; }
      .body .body__songs .body__icons i {
        margin-right: 40px;
        cursor: pointer; }
        .body .body__songs .body__icons i.body__shuffle {
          font-size: 60px !important;
          margin: 20px 40px 20px 60px;
          color: var(--logo-color); }
          .body .body__songs .body__icons i.body__shuffle + i:hover {
            transition: 100ms color ease-in;
            color: var(--logo-color) !important; }
          .body .body__songs .body__icons i.body__shuffle:hover {
            transition: 100ms transform ease-in;
            transform: scale(1.08); }
  .body .home h1 {
    margin-bottom: 15px; }
  .body .home .home__trendingSongs {
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
    transition: all 0.5s linear;
    margin-bottom: 50px; }
    .body .home .home__trendingSongs .song {
      width: 200px;
      height: 250px;
      display: flex;
      transition: all 0.5s linear;
      flex-direction: column;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      min-width: 200px;
      cursor: pointer;
      overflow: hidden;
      gap: 1rem; }
      .body .home .home__trendingSongs .song:hover {
        transition: 200ms transform linear,
 200ms background-color ease-in;
        transform: scale(1.04);
        background-color: rgba(0, 0, 0, 0.8); }
      .body .home .home__trendingSongs .song .album {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-image: url("https://i.scdn.co/image/ab67616d0000b2733f3d35703bdcd917dad51c4f");
        aspect-ratio: 1/1; }
      .body .home .home__trendingSongs .song .songInfo {
        display: flex;
        flex-direction: column;
        padding-left: 10px;
        padding-bottom: 10px; }
        .body .home .home__trendingSongs .song .songInfo p {
          font-size: 12px;
          color: lightgray; }
  .body .home .home__newReleases {
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
    transition: all 0.5s linear;
    margin-bottom: 50px; }
    .body .home .home__newReleases .song {
      flex: 0.2;
      height: 150px;
      display: flex;
      transition: all 0.5s linear;
      align-items: center;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      border-radius: 20px;
      min-width: 300px;
      cursor: pointer;
      overflow: hidden;
      gap: 1rem; }
      .body .home .home__newReleases .song:hover {
        transition: 200ms transform linear,
 200ms background-color ease-in;
        transform: scale(1.04);
        background-color: rgba(0, 0, 0, 0.8); }
      .body .home .home__newReleases .song .album {
        width: 45%;
        height: 100%;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        aspect-ratio: 1/1;
        background-image: url("https://i.scdn.co/image/ab67616d0000b2733f3d35703bdcd917dad51c4f"); }
      .body .home .home__newReleases .song .songInfo {
        display: flex;
        flex-direction: column;
        padding-left: 10px;
        padding-right: 20px;
        padding-bottom: 10px;
        width: 50%; }
        .body .home .home__newReleases .song .songInfo p {
          margin-top: 10px;
          font-size: 12px;
          color: lightgray; }
  .body .home .home__albums {
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
    transition: all 0.5s linear;
    margin-bottom: 50px; }
    .body .home .home__albums .song {
      width: 200px;
      height: 250px;
      display: flex;
      transition: all 0.5s linear;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      min-width: 200px;
      cursor: pointer;
      overflow: hidden; }
      .body .home .home__albums .song:hover {
        transition: 200ms transform linear,
 200ms background-color ease-in;
        transform: scale(1.04);
        background-color: rgba(0, 0, 0, 0.8); }
      .body .home .home__albums .song .album {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-image: url("https://i.scdn.co/image/ab67616d0000b2733f3d35703bdcd917dad51c4f");
        aspect-ratio: 1/1; }
  .body .home .home__artists {
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
    transition: all 0.5s linear;
    margin-bottom: 50px; }
    .body .home .home__artists .artist {
      width: 200px;
      height: 250px;
      display: flex;
      transition: all 0.5s linear;
      flex-direction: column;
      align-items: center;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      min-width: 200px;
      cursor: pointer;
      overflow: hidden;
      padding: 15px;
      gap: 1rem; }
      .body .home .home__artists .artist:hover {
        transition: 200ms transform linear,
 200ms background-color ease-in;
        transform: scale(1.04);
        background-color: rgba(0, 0, 0, 0.8); }
      .body .home .home__artists .artist .artistImage {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-image: url("https://i.scdn.co/image/ab67616d0000b2733f3d35703bdcd917dad51c4f");
        aspect-ratio: 1/1; }
      .body .home .home__artists .artist .artistInfo {
        padding-bottom: 10px; }
  .body .home .home__playlists {
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
    transition: all 0.5s linear;
    margin-bottom: 50px; }
    .body .home .home__playlists .playlist {
      width: 200px;
      height: 200px;
      display: flex;
      transition: all 0.5s linear;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      border-radius: 5px;
      min-width: 200px;
      cursor: pointer;
      overflow: hidden; }
      .body .home .home__playlists .playlist:hover {
        transition: 200ms transform linear,
 200ms background-color ease-in;
        transform: scale(1.04);
        background-color: rgba(0, 0, 0, 0.8); }
      .body .home .home__playlists .playlist .album {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-image: url("https://i.scdn.co/image/ab67616d0000b2733f3d35703bdcd917dad51c4f");
        aspect-ratio: 1/1; }
  .body .home .home__genres {
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
    transition: all 0.5s linear;
    margin-bottom: 50px; }
    .body .home .home__genres .genre {
      width: 200px;
      height: 200px;
      display: flex;
      transition: all 0.5s linear;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      border-radius: 5px;
      min-width: 200px;
      cursor: pointer;
      overflow: hidden; }
      .body .home .home__genres .genre:hover {
        transition: 200ms transform linear,
 200ms background-color ease-in;
        transform: scale(1.04);
        background-color: rgba(0, 0, 0, 0.8); }
      .body .home .home__genres .genre .image {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-image: url("https://i.scdn.co/image/ab67616d0000b2733f3d35703bdcd917dad51c4f");
        aspect-ratio: 1/1;
        position: relative; }
        .body .home .home__genres .genre .image h1 {
          display: flex;
          justify-content: center;
          align-items: center;
          background-color: rgba(0, 0, 0, 0.7);
          width: 100%;
          height: 100%; }
  .body .create_playlist .body__info .albumImage {
    background-image: url("/images/custom-playlist.jpg");
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    width: 20vw;
    height: 20vw;
    min-width: 150px;
    min-height: 150px;
    margin: 0 20px;
    border-radius: 10px;
    box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
    position: relative;
    overflow: hidden;
    display: inline-block; }
    .body .create_playlist .body__info .albumImage:hover {
      transition: 200ms filter linear;
      filter: grayscale(1); }
    .body .create_playlist .body__info .albumImage input[type="file"],
    .body .create_playlist .body__info .albumImage input[type="file"]::-webkit-file-upload-button {
      cursor: pointer; }
    .body .create_playlist .body__info .albumImage input[type="file"] {
      cursor: pointer;
      font-size: 200px;
      position: absolute;
      left: 0;
      top: 0;
      opacity: 0; }
  .body .create_playlist input[type="submit"] {
    padding: 20px;
    width: 30%;
    border-radius: 99px;
    background-color: var(--logo-color);
    font-weight: 600 !important;
    color: var(--text-color);
    text-decoration: none;
    display: flex;
    justify-content: center;
    align-items: center;
    word-spacing: 0.1rem;
    margin: auto;
    margin-top: 2rem;
    letter-spacing: 0.05rem;
    cursor: pointer;
    font-weight: 800;
    transition: 0.1s ease-in;
    outline: none;
    border: none; }
    .body .create_playlist input[type="submit"]:hover {
      color: var(--background-color); }
    .body .create_playlist input[type="submit"]:focus {
      outline: none; }
  .body .library h1 {
    margin-bottom: 15px; }
  .body .library .library__playlists,
  .body .library .library__songs,
  .body .library .library__artists,
  .body .library .library__albums {
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
    transition: all 0.5s linear;
    margin-bottom: 50px; }
    .body .library .library__playlists .song,
    .body .library .library__songs .song,
    .body .library .library__artists .song,
    .body .library .library__albums .song {
      width: 200px;
      height: 250px;
      display: flex;
      transition: all 0.5s linear;
      flex-direction: column;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      min-width: 200px;
      cursor: pointer;
      overflow: hidden;
      gap: 1rem; }
      .body .library .library__playlists .song:hover,
      .body .library .library__songs .song:hover,
      .body .library .library__artists .song:hover,
      .body .library .library__albums .song:hover {
        transition: 200ms transform linear,
 200ms background-color ease-in;
        transform: scale(1.04);
        background-color: rgba(0, 0, 0, 0.8); }
      .body .library .library__playlists .song .album,
      .body .library .library__songs .song .album,
      .body .library .library__artists .song .album,
      .body .library .library__albums .song .album {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-image: url();
        aspect-ratio: 1/1; }
        .body .library .library__playlists .song .album img,
        .body .library .library__songs .song .album img,
        .body .library .library__artists .song .album img,
        .body .library .library__albums .song .album img {
          width: 100%;
          height: 100%;
          -o-object-fit: cover;
          -o-object-position: center;
          object-fit: cover;
          object-position: center;
          aspect-ratio: 1/1; }
      .body .library .library__playlists .song .songInfo,
      .body .library .library__songs .song .songInfo,
      .body .library .library__artists .song .songInfo,
      .body .library .library__albums .song .songInfo {
        display: flex;
        flex-direction: column;
        padding-left: 10px;
        padding-bottom: 10px; }
        .body .library .library__playlists .song .songInfo p,
        .body .library .library__songs .song .songInfo p,
        .body .library .library__artists .song .songInfo p,
        .body .library .library__albums .song .songInfo p {
          font-size: 12px;
          color: lightgray; }
  .body .search h3 {
    font-weight: 600; }
  .body .search h1 {
    margin-bottom: 15px; }
  .body .search .songs,
  .body .search .albums,
  .body .search .playlists {
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
    transition: all 0.5s linear;
    margin-bottom: 50px; }
    .body .search .songs .song,
    .body .search .albums .song,
    .body .search .playlists .song {
      width: 200px;
      height: 250px;
      display: flex;
      transition: all 0.5s linear;
      flex-direction: column;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      min-width: 200px;
      cursor: pointer;
      overflow: hidden;
      gap: 1rem; }
      .body .search .songs .song:hover,
      .body .search .albums .song:hover,
      .body .search .playlists .song:hover {
        transition: 200ms transform linear,
 200ms background-color ease-in;
        transform: scale(1.04);
        background-color: rgba(0, 0, 0, 0.8); }
      .body .search .songs .song .album,
      .body .search .albums .song .album,
      .body .search .playlists .song .album {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-image: url("");
        aspect-ratio: 1/1; }
        .body .search .songs .song .album img,
        .body .search .albums .song .album img,
        .body .search .playlists .song .album img {
          width: 100%;
          height: 97%;
          -o-object-fit: cover;
          -o-object-position: center;
          object-fit: cover;
          object-position: center;
          aspect-ratio: 1/1; }
      .body .search .songs .song .songInfo,
      .body .search .albums .song .songInfo,
      .body .search .playlists .song .songInfo {
        display: flex;
        flex-direction: column;
        padding-left: 10px;
        padding-bottom: 10px; }
        .body .search .songs .song .songInfo p,
        .body .search .albums .song .songInfo p,
        .body .search .playlists .song .songInfo p {
          font-size: 12px;
          color: lightgray; }
  .body .search .artists,
  .body .search .profiles {
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
    transition: all 0.5s linear;
    margin-bottom: 50px; }
    .body .search .artists .artist,
    .body .search .profiles .artist {
      width: 200px;
      height: 250px;
      display: flex;
      transition: all 0.5s linear;
      flex-direction: column;
      align-items: center;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      min-width: 200px;
      cursor: pointer;
      overflow: hidden;
      padding: 15px;
      gap: 1rem; }
      .body .search .artists .artist:hover,
      .body .search .profiles .artist:hover {
        transition: 200ms transform linear,
 200ms background-color ease-in;
        transform: scale(1.04);
        background-color: rgba(0, 0, 0, 0.8); }
      .body .search .artists .artist .artistImage,
      .body .search .profiles .artist .artistImage {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-image: url("");
        aspect-ratio: 1/1; }
        .body .search .artists .artist .artistImage img,
        .body .search .profiles .artist .artistImage img {
          width: 100%;
          height: 100%;
          border-radius: 50%;
          -o-object-fit: cover;
          -o-object-position: center;
          object-fit: cover;
          object-position: center;
          aspect-ratio: 1/1; }
      .body .search .artists .artist .artistInfo,
      .body .search .profiles .artist .artistInfo {
        padding-bottom: 10px; }
  .body .profile .body__info {
    display: flex;
    align-items: center;
    flex-direction: column;
    padding: 10px;
    gap: 1rem; }
    .body .profile .body__info .userAvatar {
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      width: 20vw;
      height: 20vw;
      min-width: 150px;
      min-height: 150px;
      margin: 0 20px;
      border-radius: 50%;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      position: relative;
      overflow: hidden;
      display: inline-block; }
      .body .profile .body__info .userAvatar img {
        width: 100%;
        height: 100%;
        margin: 0;
        -o-object-fit: cover;
        -o-object-position: center;
        -mz-object-fit: cover;
        -mz-object-position: center;
        -webkit-object-fit: cover;
        -webkit-object-position: center;
        object-fit: cover;
        object-position: center;
        aspect-ratio: 1/1; }
      .body .profile .body__info .userAvatar:hover {
        transition: 200ms filter linear;
        filter: grayscale(1); }
      .body .profile .body__info .userAvatar input[type="file"],
      .body .profile .body__info .userAvatar input[type="file"]::-webkit-file-upload-button {
        cursor: pointer; }
      .body .profile .body__info .userAvatar input[type="file"] {
        cursor: pointer;
        font-size: 200px;
        position: absolute;
        left: 0;
        top: 0;
        opacity: 0; }
    .body .profile .body__info .body__infoText {
      flex: 1;
      margin-top: 2rem; }
      .body .profile .body__info .body__infoText h1 {
        margin-top: 2rem;
        color: var(--logo-color);
        word-break: break-all; }
      .body .profile .body__info .body__infoText .nameInput,
      .body .profile .body__info .body__infoText .emailInput,
      .body .profile .body__info .body__infoText .passwordInput {
        background: transparent;
        color: var(--text-color);
        font-size: 48px;
        outline: none;
        border: none;
        border-bottom: 1px solid var(--text-color);
        width: 100%;
        font-weight: 700;
        margin: 0;
        padding: 0; }
        .body .profile .body__info .body__infoText .nameInput:focus,
        .body .profile .body__info .body__infoText .emailInput:focus,
        .body .profile .body__info .body__infoText .passwordInput:focus {
          outline: none; }
      .body .profile .body__info .body__infoText h2 {
        font-size: 48px;
        word-break: break-all;
        margin-bottom: 10px; }
        .body .profile .body__info .body__infoText h2.active {
          display: none; }
      .body .profile .body__info .body__infoText p {
        font-size: 14px;
        color: lightgray; }
      .body .profile .body__info .body__infoText .user_info {
        display: flex;
        align-items: center;
        margin: 10px 0;
        gap: 0.5rem; }
        .body .profile .body__info .body__infoText .user_info img {
          height: 1.5rem;
          width: 1.5rem;
          border-radius: 50%;
          margin: 0; }
          .body .profile .body__info .body__infoText .user_info img + P:hover {
            cursor: pointer;
            text-decoration: underline; }
    .body .profile .body__info button {
      padding: 20px;
      border-radius: 99px;
      background-color: var(--logo-color);
      font-weight: 600 !important;
      color: var(--text-color);
      text-decoration: none;
      display: flex;
      justify-content: center;
      align-items: center;
      word-spacing: 0.1rem;
      margin-top: 2rem;
      letter-spacing: 0.05rem;
      cursor: pointer;
      font-weight: 800;
      transition: 0.1s ease-in;
      outline: none;
      border: none; }
      .body .profile .body__info button:hover {
        color: var(--background-color); }
      .body .profile .body__info button:focus {
        outline: none; }
  .body .profile .following,
  .body .profile .followers {
    margin-top: 3rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    flex-wrap: wrap;
    width: 100%; }
    .body .profile .following .person,
    .body .profile .followers .person {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
      padding: 10px;
      box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      cursor: pointer; }
      .body .profile .following .person:hover,
      .body .profile .followers .person:hover {
        transition: 200ms transform linear,
 200ms background-color ease-in;
        transform: scale(1.04);
        background-color: rgba(0, 0, 0, 0.8); }
      .body .profile .following .person .image,
      .body .profile .followers .person .image {
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        width: 10vw;
        height: 10vw;
        border-radius: 50%;
        overflow: hidden; }
        .body .profile .following .person .image img,
        .body .profile .followers .person .image img {
          width: 100%;
          height: 100%;
          margin: 0;
          -o-object-fit: cover;
          -o-object-position: center;
          -mz-object-fit: cover;
          -mz-object-position: center;
          -webkit-object-fit: cover;
          -webkit-object-position: center;
          object-fit: cover;
          object-position: center;
          aspect-ratio: 1/1; }

@media screen and (max-width: 700px) {
  .body {
    flex: 1; }
  .body .home .home__newReleases .song {
    min-width: 100%; }
    .body .home .home__newReleases .song .album {
      width: 40%; } }

@media screen and (max-width: 685px) {
  .body .profile .following .person .image,
  .body .profile .followers .person .image {
    min-width: 25vw;
    min-height: 25vw; } }

@media screen and (max-width: 500px) {
  .body .body__info {
    align-items: center;
    flex-direction: column; }
    .body .body__info img {
      height: 150px; }
  .body .home .home__newReleases .song .songInfo h4 {
    word-break: break-all; } }

@media screen and (max-width: 360px) {
  .body .home .home__newReleases .song {
    min-width: 250px; }
    .body .home .home__newReleases .song .album {
      width: 40%; } }
	  .login {
  display: grid;
  place-items: center;
  height: 100%;
  background-color: var(--background-color);
  display: flex;
  flex-direction: column; }
  .login .login__logo {
    width: 100%;
    overflow: hidden;
    -o-object-fit: contain;
    -ms-object-fit: contain;
    -webkit-object-fit: contain;
    object-fit: contain; }
  .login .logo__btns {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    width: 100%; }
    .login .logo__btns .login__spotifyBtn,
    .login .logo__btns .login__googleBtn,
    .login .logo__btns .login__btn {
      padding: 20px;
      cursor: pointer;
      border-radius: 99px;
      background-color: var(--logo-color);
      font-weight: 600 !important;
      color: var(--text-color);
      text-decoration: none;
      display: flex;
      justify-content: center;
      align-items: center;
      word-spacing: 0.1rem;
      letter-spacing: 0.05rem;
      font-weight: 800;
      box-shadow: 0px 4px 5px rgba(54, 200, 0, 0.5);
      transition: 0.1s ease-in; }
      .login .logo__btns .login__spotifyBtn i,
      .login .logo__btns .login__googleBtn i,
      .login .logo__btns .login__btn i {
        margin-right: 10px;
        color: var(--text-color);
        font-size: 0.9rem;
        background-color: var(--background-color);
        border-radius: 50%;
        padding: 3.5px; }
      .login .logo__btns .login__spotifyBtn img,
      .login .logo__btns .login__googleBtn img,
      .login .logo__btns .login__btn img {
        width: 20px;
        height: 20px;
        margin-right: 10px;
        border-radius: 50%; }
      .login .logo__btns .login__spotifyBtn:hover,
      .login .logo__btns .login__googleBtn:hover,
      .login .logo__btns .login__btn:hover {
        color: var(--background-color); }

.player .player__body {
  display: flex; }

@media screen and (max-width: 700px) {
  .login .logo__btns {
    flex-direction: column;
    flex: 1; } }
	@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&family=Red+Hat+Display:wght@300;400;500&display=swap");
* {
  -webkit-user-select: none;
  -webkit-user-drag: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -o-user-select: none;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  user-select: none;
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  font-family: "Red Hat Display", sans-serif;
  font-family: "Poppins", sans-serif; }

:root {
  --background-color: #040404;
  --logo-color: #1ed15e;
  --text-color: #fff;
  --heading-font-family: "Poppins", sans-serif;
  --text-font-family: "Red Hat Display", sans-serif; }

body {
  position: relative;
  width: 100%;
  height: 100%; }

body::-webkit-scrollbar {
  display: none; }

main {
  width: 100vw;
  height: 100vh;
  min-height: 100vh; }
  @import url("https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700");
@keyframes scale {
  from {
    transform: scale(0); }
  to {
    transform: scale(1); } }

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box; }

.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.2);
  z-index: 300; }
  .modal .modal-content {
    margin: 20% auto;
    max-width: 500px;
    background-color: #fff;
    padding: 20px;
    animation: scale 0.5s ease;
    border-radius: 10px;
    box-shadow: 6.7px 6.7px 5.3px rgba(0, 0, 0, 0.02), 22.3px 22.3px 17.9px rgba(0, 0, 0, 0.03), 100px 100px 80px rgba(0, 0, 0, 0.05); }
    .modal .modal-content #close-modal {
      float: right;
      font-size: 1.2rem;
      font-weight: bold;
      cursor: pointer; }
    .modal .modal-content .modal-body {
      margin-top: 5px;
      display: flex;
      justify-content: flex-start;
      align-items: center; }
      .modal .modal-content .modal-body .social {
        width: 5rem;
        height: 5rem;
        cursor: pointer; }
      .modal .modal-content .modal-body .twitter {
        width: 5.6rem;
        height: 5.6rem; }

@media screen and (max-width: 500px) {
  .modal .modal-content {
    margin-top: 50%; } }

</style>




<% if(locals.user){ %> <%- include('modal.ejs') -%>
<div class="player">
	<div class="player__body">
		<%- include('_sidebar.ejs') -%> <%- include('_newPlaylist.ejs') -%>
	</div>
	<%- include('_footer.ejs') -%>
</div>
<% }else{ %>
<div class="login">
	<img
		src="https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg"
		alt="spotify-logo"
		class="login__logo"
	/>
	<div class="logo__btns">
		<a href="/users/auth/spotify" class="login__spotifyBtn">
			<img
				src="<%= assetPath('images/spotify-logo.png') %>"
				alt="Sign in with Spotify"
			/>
			Login With Spotify
		</a>
		<a href="/users/auth/google" class="login__googleBtn">
			<img
				src="<%= assetPath('images/google-logo.jpg') %>"
				alt="Sign in with Google"
			/>
			Login With Google
		</a>
		<a href="/users/login" class="login__btn">
			<i class="fa-solid fa-envelope"></i>
			Login With Email
		</a>
	</div>
</div>
<% } %>




<script defer>

	window.onload=function(){
	class CreatePlaylist {
	constructor() {
		this.form = document.getElementById("create_playlist");
		this.thumbnail = document.getElementsByClassName("playlistPoster")[0];
		this.info = document.getElementsByClassName("body__infoText")[0];
		this.poster = document.getElementsByClassName("playlistPoster")[0];
		this.songs = document.getElementsByClassName("songRow");

		this.createPlaylist();
	}
	createPlaylist() {
		let self = this;
		self.form.addEventListener("submit", async (e) => {
			e.preventDefault();
			e.stopPropagation();
			let formSelf = e.target; //or formSelf = this;
			let formData = new FormData(formSelf);

			// --------------STUDY REFERENCE--------------
			// const name = formData.get("name"); //test
			// console.log({name}); //{name: "test"}
			// console.log(name); //test
			// let Data = Object.fromEntries(formData.entries()); //json object {name: "test"}
			// Data.songs = formData.getAll("songs"); //checkboxes {name: "test", songs: ["1", "2"]}
			// console.log(data); //{name: "test", songs: ["1", "2"]}
			// --------------STUDY REFERENCE--------------

			// --------------STUDY REFERENCE--------------
			// const thumbnail = formData.get("thumbnail");
			// if (
			// 	thumbnail.type !== "image/jpeg" ||
			// 	thumbnail.type !== "image/png" ||
			// 	thumbnail.type !== "image/jpg" ||
			// 	thumbnail.type !== "image/gif"
			// ) {
			// 	new Noty({
			// 		theme: "metroui",
			// 		text: "Please upload a valid image",
			// 		type: "error",
			// 		layout: "topRight",
			// 		timeout: 3000,
			// 	}).show();
			// 	return;
			// }
			// --------------STUDY REFERENCE--------------

			const name = formData.get("name");
			if (
				name === "" ||
				name === null ||
				name === undefined ||
				name === " "
			) {
				new Noty({
					theme: "metroui",
					text: "Please enter a name for the playlist",
					type: "error",
					layout: "topRight",
					timeout: 3000,
				}).show();
				return;
			}

			const songs = formData.getAll("songs");
			if (songs.length <= 1) {
				new Noty({
					theme: "metroui",
					text: "Please select at least 2 songs",
					type: "error",
					layout: "topRight",
					timeout: 3000,
				}).show();
				return;
			}

			try {
				const url = `/playlists/create-playlist`;
				const response = await fetch(url, {
					method: "POST",
					body: formData,
				});
				const data = await response.json();
				console.log(data);
				let id = data.playlist._id.toString();
				window.location.href = `/playlists/custom/${id}`;
			} catch (error) {
				console.log(error);
				new Noty({
					theme: "metroui",
					text: error.message,
					type: "error",
					layout: "topRight",
					timeout: 3000,
				}).show();
				return;
			}
		});
	}
}

{
	//New Playlist Creation
	try {
		let createPlaylist = new CreatePlaylist();
	} catch (error) {
		console.log(error);
	}
	//Playlist Screen Name & Poster Update
	try {
		const playlist = () => {
			const playlistPoster = document.querySelector(".playlistPoster");
			const playlistNameInput = document.querySelector(
				".playlist_nameInput"
			);
			const playlistName = document.querySelector(".playlist_name");

			playlistName.onclick = (e) => {
				e.target.classList.toggle("active");
				playlistNameInput.classList.toggle("active");
				playlistNameInput.focus();
				//To place the cursor at the end of the input
				const length = playlistNameInput.value.length;
				playlistNameInput.setSelectionRange(length, length);
			};

			playlistNameInput.onkeypress = (e) => {
				if (e.key === "Enter") {
					e.target.classList.toggle("active");
					playlistName.classList.toggle("active");
					playlistName.textContent = "";
					playlistName.textContent = e.target.value;
				}
			};

			playlistNameInput.onchange = (e) => {
				e.target.classList.toggle("active");
				playlistName.classList.toggle("active");
				playlistName.textContent = "";
				playlistName.textContent = e.target.value;
				// console.log(e.target.value);
				e.target.blur();
			};

			playlistPoster.onchange = (e) => {
				// console.log(e.target.files[0]);
			};
		};
		playlist();
	} catch (error) {
		// console.log(error);
	}
	//Dropdown Menu
	try {
		const header = () => {
			const dropdown = document.querySelector(".header__right");
			const dropdownMenu = document.querySelector(".dropdown_menu");
			dropdown.onclick = () => {
				dropdownMenu.classList.toggle("active");
			};
		};
		header();
	} catch (error) {
		console.log(error);
	}
	//Sidebar Responsiveness
	try {
		const jsMediaQuery = (width) => {
			const sidebar = document.querySelector(".sidebar");
			if (width.matches) {
				sidebar.style.display = "none";
			} else {
				sidebar.style.display = "initial";
			}
		};
		const sidebar = () => {
			const width = window.matchMedia("(max-width: 700px)");
			jsMediaQuery(width);
			width.addEventListener("change", jsMediaQuery);
		};
		sidebar();
	} catch (error) {
		console.log(error);
	}
}
	}
</script>




<script def>
	window.onload=function(){
	{
	try {
		let Tracks;
		let currentTrack;
		let playbarVisible;
		let volume;
		let isPlaying;
		let loop;

		let footer = document.querySelector(".footer");
		let songs = document.querySelectorAll(".playable-tracks");
		let play_pause = footer.querySelector(".play-pause");
		let audio = document.querySelector("audio");
		let volumeControl = footer.querySelector(".song_volume");
		let clearQueue = footer.querySelector(".clearQueue");
		let forward = footer.querySelector(".forward");
		let backward = footer.querySelector(".backward");
		let repeat = footer.querySelector(".repeat");
		let shuffle = footer.querySelector(".shuffle");

		const fetchAPI = async (url, options = {}) => {
			try {
				const response = await fetch(url, options);
				const data = await response.json();
				return data;
			} catch (error) {
				console.log(error);
			}
		};

		const onPageRefresh = () => {
			window.addEventListener("beforeunload", async function (e) {
				e.preventDefault();
				const data = await fetchAPI("/queue");
				const Queue = data.data;

				({ Tracks, currentTrack, playbarVisible, volume, isPlaying, loop } =
					Queue);

				if (isPlaying && Tracks[currentTrack].isPlaying) {
					Tracks[currentTrack].currentTime = audio.currentTime;
					Tracks[currentTrack].isPlaying = true;
					Tracks[currentTrack].duration = audio.duration;

					await fetchAPI("/queue/update", {
						method: "PUT",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify({
							Track: Tracks[currentTrack],
							currentTrack,
							playbarVisible,
							volume,
							isPlaying: true,
							loop,
						}),
					});
				}
				return;
			});
		};

		const getQueueData = async () => {
			try {
				const data = await fetchAPI("/queue");
				const Queue = data.data;

				({ Tracks, currentTrack, playbarVisible, volume, isPlaying, loop } =
					Queue);

				togglePlayBar(Tracks[currentTrack]);

				audio.src = Tracks[currentTrack].url;
				audio.volume = volume;
				audio.currentTime = Tracks[currentTrack].currentTime;
				volumeControl.value = volume * 100;
				Tracks[currentTrack].duration = audio.duration;

				if (playbarVisible && isPlaying) {
					await pause(Tracks[currentTrack]);
					play_pause.classList.remove("fa-circle-pause");
					play_pause.classList.add("fa-circle-play");
				} else if (playbarVisible && !isPlaying) {
					footer.click();
					await play(Tracks[currentTrack]);
					play_pause.classList.remove("fa-circle-play");
					play_pause.classList.add("fa-circle-pause");
				}
				footer.click();
				await play(Tracks[currentTrack]);
				play_pause.classList.remove("fa-circle-play");
				play_pause.classList.add("fa-circle-pause");
				console.log("Tracks: ", Tracks);
				console.log("currentTrack: ", currentTrack);
				console.log("playbarVisible: ", playbarVisible);
				console.log("volume: ", volume);
				console.log("isPlaying: ", isPlaying);
			} catch (error) {}
		};

		const playbar = async () => {
			if (songs && songs.length > 0) {
				for (let song of songs) {
					song.addEventListener("click", async (e) => {
						e.stopPropagation();
						e.preventDefault();
						const name = song.getAttribute("data-song-name");
						const artist = song.getAttribute("data-song-artist");
						const url = song.getAttribute("data-song-url");
						const thumbnail = song.getAttribute("data-song-thumbnail");
						const name1 = name.trim().toLowerCase();
						const name2 = Tracks[currentTrack]?.name.trim().toLowerCase();
						const duration = 0;
						const currentTime = 0;
						const ended = false;

						if (name1 === name2) {
							if (isPlaying) {
								await pause(Tracks[currentTrack]);
								play_pause.classList.remove("fa-circle-pause");
								play_pause.classList.add("fa-circle-play");
								return;
							} else {
								await play(Tracks[currentTrack]);
								play_pause.classList.remove("fa-circle-play");
								play_pause.classList.add("fa-circle-pause");
								return;
							}
						}

						const Track = {
							name,
							artist,
							url,
							thumbnail,
							duration,
							currentTime,
							ended,
							isPlaying: true,
						};

						let arr = Tracks.filter(
							(track) =>
								track.name.trim().toLowerCase() ===
								Track.name.trim().toLowerCase()
						);
						if (arr.length > 0) {
							currentTrack = Tracks.findIndex((track) => {
								return (
									track.name.trim().toLowerCase() ===
									Track.name.trim().toLowerCase()
								);
							});
							if (currentTrack === -1) return;
							audio.src = Tracks[currentTrack].url;
							audio.volume = volume;
							await play(Tracks[currentTrack]);
							await togglePlayBar(Tracks[currentTrack]);
							if (Tracks[currentTrack].isPlaying) {
								play_pause.classList.remove("fa-circle-play");
								play_pause.classList.add("fa-circle-pause");
							}
							return;
						}

						const data = await fetchAPI("/queue/add", {
							method: "POST",
							headers: {
								"Content-Type": "application/json",
							},
							body: JSON.stringify({
								Track: Track,
								currentTrack: currentTrack,
								playbarVisible: playbarVisible,
								volume: volume,
								isPlaying: isPlaying,
								loop: loop,
							}),
						});
						const Queue = data.data;
						({
							Tracks,
							currentTrack,
							playbarVisible,
							volume,
							isPlaying,
							loop,
						} = Queue);

						audio.src = Tracks[currentTrack].url;
						audio.volume = volume;
						await play(Tracks[currentTrack]);
						await togglePlayBar(Tracks[currentTrack]);

						if (Tracks[currentTrack].isPlaying) {
							play_pause.classList.remove("fa-circle-play");
							play_pause.classList.add("fa-circle-pause");
						}
					});
				}
			}
			volumeControl.addEventListener("input", async (e) => {
				await volumeChange(e);
			});
			volumeControl.addEventListener("wheel", async (e) => {
				await volumeScroll(e);
			});
			play_pause.addEventListener("click", async (e) => {
				await playToggle(Tracks[currentTrack], e);
			});
			forward.addEventListener("click", async (e) => {
				await next();
			});
			backward.addEventListener("click", async (e) => {
				await previous();
			});
			clearQueue.addEventListener("click", async (e) => {
				await deleteQueue();
			});
			repeat.addEventListener("click", async (e) => {
				await toggleLoop(e);
			});
			shuffle.addEventListener("click", async (e) => {
				await playlistShuffle();
			});
			audio.addEventListener("ended", async (e) => {
				await stop();
				if (currentTrack === Tracks.length - 1) {
					if (!loop) {
						await pause(Tracks[currentTrack]);
						play_pause.classList.remove("fa-circle-pause");
						play_pause.classList.add("fa-circle-play");
					}
				}
				await next();
			});
		};

		const playlistShuffle = async () => {
			const FisherYatesAlgorithm = (Tracks) => {
				let PointerIndex = Tracks.length;
				let RandomIndex;
				// While the Array Length or the PointerIndex is greater than 0
				while (PointerIndex !== 0) {
					// Pick a RandomIndex between 0 and PointerIndex - 1
					RandomIndex = Math.floor(Math.random() * PointerIndex);
					PointerIndex -= 1;

					// Do nothing for the Current Track.
					if (RandomIndex === currentTrack) continue;
					if (PointerIndex === currentTrack) continue;

					// Swap the PointerIndex & RandomIndex Elements.
					[Tracks[PointerIndex], Tracks[RandomIndex]] = [
						Tracks[RandomIndex],
						Tracks[PointerIndex],
					];
				}
				return Tracks;
			};
			FisherYatesAlgorithm(Tracks);
			new Noty({
				theme: "metroui",
				text: "Playlist Shuffled",
				type: "success",
				layout: "topRight",
				timeout: 3000,
			}).show();
			await fetchAPI("/queue/shuffle", {
				method: "PUT",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ Tracks, currentTrack }),
			});
		};

		const toggleLoop = async (e) => {
			loop = !loop;
			if (loop) e.target.classList.add("footer__green");
			if (!loop) e.target.classList.remove("footer__green");
			new Noty({
				theme: "metroui",
				text: "Loop is now " + (loop ? "ON" : "OFF"),
				type: "success",
				layout: "topRight",
				timeout: 3000,
			}).show();
			const data = await fetchAPI("/queue/repeat", {
				method: "PUT",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ loop }),
			});
			loop = data.data.loop;
		};

		const play = async (Track) => {
			await audio.play();
			isPlaying = true;
			playbarVisible = true;
			Track.duration = audio.duration;
			Track.currentTime = audio.currentTime;
			Track.isPlaying = !audio.paused;
			Track.ended = audio.ended;
			await fetchAPI("/queue/update", {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					Track,
					currentTrack,
					playbarVisible,
					volume,
					isPlaying,
					loop,
				}),
			});
		};

		const pause = async (Track) => {
			await audio.pause();
			isPlaying = false;
			playbarVisible = true;
			Track.duration = audio.duration;
			Track.currentTime = audio.currentTime;
			Track.isPlaying = !audio.paused;
			Track.ended = audio.ended;
			await fetchAPI("/queue/update", {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					Track,
					currentTrack,
					playbarVisible,
					volume,
					isPlaying,
					loop,
				}),
			});
		};

		const stop = async () => {
			if (!audio.src) return;
			await audio.pause();
			audio.currentTime = 0;
		};

		const next = async () => {
			if (currentTrack === Tracks.length - 1 && !loop) return;
			await stop();
			if (currentTrack === Tracks.length - 1 && loop) currentTrack = 0;
			else if (currentTrack !== Tracks.length - 1 && loop) currentTrack++;
			else if (currentTrack !== Tracks.length - 1 && !loop) currentTrack++;
			audio.src = Tracks[currentTrack].url;
			audio.volume = volume;
			play_pause.classList.remove("fa-circle-play");
			play_pause.classList.add("fa-circle-pause");
			await togglePlayBar(Tracks[currentTrack]);
			await play(Tracks[currentTrack]);
		};

		const previous = async () => {
			if (currentTrack === 0 && !loop) return;
			await stop();
			if (currentTrack === 0 && loop) currentTrack = Tracks.length - 1;
			else if (currentTrack !== 0 && loop) currentTrack--;
			else if (currentTrack !== 0 && !loop) currentTrack--;
			audio.src = Tracks[currentTrack].url;
			audio.volume = volume;
			play_pause.classList.remove("fa-circle-play");
			play_pause.classList.add("fa-circle-pause");
			await togglePlayBar(Tracks[currentTrack]);
			await play(Tracks[currentTrack]);
		};

		const deleteQueue = async () => {
			await stop();
			Tracks = [];
			currentTrack = -1;
			playbarVisible = false;
			volume = 0.1;
			isPlaying = false;
			loop = false;
			await fetchAPI("/queue/clear", { method: "DELETE" });
			await togglePlayBar();
		};

		const volumeScroll = async (e) => {
			e.stopPropagation();
			if (e.deltaY < 0) {
				e.target.valueAsNumber += 1;
				audio.volume = e.target.value / 100;
			} else {
				e.target.value -= 1;
				audio.volume = e.target.value / 100;
			}
			volume = audio.volume;
			volumeControl.value = volume * 100;
			await fetchAPI("/queue/volume", {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					volume: volume,
				}),
			});
			e.preventDefault();
		};

		const volumeChange = async (e) => {
			audio.volume = e.target.value / 100;
			volume = audio.volume;
			volumeControl.value = volume * 100;
			await fetchAPI("/queue/volume", {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					volume: volume,
				}),
			});
		};

		const playToggle = async (Track, e) => {
			if (Track.isPlaying) {
				await pause(Track);
				e.target.classList.remove("fa-circle-pause");
				e.target.classList.add("fa-circle-play");
			} else {
				await play(Track);
				e.target.classList.remove("fa-circle-play");
				e.target.classList.add("fa-circle-pause");
			}
		};

		const togglePlayBar = async (Track = []) => {
			if (playbarVisible) {
				footer.style.display = "flex";
				const album = footer.querySelector(".footer__albumLogo");
				const name = footer.querySelector(".footer__songInfo h4");
				const artist = footer.querySelector(".footer__songInfo p");
				album.src = Track.thumbnail;
				name.textContent = Track.name;
				artist.textContent = Track.artist;
				if (loop) repeat.classList.add("footer__green");
				if (!loop) repeat.classList.remove("footer__green");
			} else {
				footer.style.display = "none";
			}
		};

		onPageRefresh();
		getQueueData();
		playbar();
	} catch (error) {
		console.log(error);
	}
}
	}
</script>
